Changed the exception statement in tensorflow/lite/toco/tflite/export.cc:
"Placeholder ", input_array, " should be specied by input_arrays."
to:
"Placeholder ", input_array, " should be specified by input_arrays."This PR is one of steps to extend 8-bit quantization to support symmetric 16-bit activations.

Each activation is of type int16 and symmetric around zero. The weight tensor precision remains at 8-bit signed values. The bias is set to int64 precision.

In this PR we introduce implementation and tests for MUL kernel reference function.
The specification of this operator:

MUL 
  Input 0: 
    data_type  : int16 
    range      : [-32768, 32767] 
    granularity: per-tensor, zero_point=0 
  Input 1: 
    data_type  : int16 
    range      : [-32768, 32767] 
    granularity: per-tensor, zero_point=0 
  Output 0: 
    data_type  : int16 
    range      : [-32768, 32767] 
    granularity: per-tensor, zero_point=0 
 32767]
    granularity: per-tensor, zero_point=0
<em>Please make sure that this is a bug. As per our [GitHub Policy](https://github.com/tensorflow/tensorflow/blob/master/ISSUES.md), we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template</em>

**System information**
- Have I written custom code (as opposed to using a stock example script provided in TensorFlow): N
- OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu18.04
- Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:N/A
- TensorFlow installed from (source or binary):binary
- TensorFlow version (use command below): 2.1.0
- Python version: 3.6
- Bazel version (if compiling from source): N/A
- GCC/Compiler version (if compiling from source): N/A
- CUDA/cuDNN version:N/A
- GPU model and memory:N/A

**Describe the current behavior**
CONV_2d convert to DEPTHWISE_CONV when input depth=1

**Describe the expected behavior**
CONV_2d should be CONV_2d

**Code to reproduce the issue**
if input depth=1 for CON_2D layer, TFLite converter will convert it to DEPTHWISE_CONV.
Although it's computationally identical, it can cause confusion and potentially bug...

To replicate the problem:
```python
import tensorflow as tf
import numpy as np


def gen_calibration_dataset():
    for _ in range(10):
        yield [np.random.rand(1,28,28,1).astype(np.float32)]

def get_keras_model_conv():

    input_0 = tf.keras.layers.Input(shape=[28, 28, 1])

    conv_0 = tf.keras.layers.Conv2D(filters=12, kernel_size=(3, 3),
                                    activation=tf.nn.relu)(input_0)
    conv_1 = tf.keras.layers.Conv2D(filters=12, kernel_size=(3, 3),
                                    activation=tf.nn.relu)(conv_0)

    model = tf.keras.models.Model(inputs=[input_0], outputs=[conv_1])

    model.summary()

    return model

def gen_model():

    keras_model = get_keras_model_conv()
    converter = tf.lite.TFLiteConverter.from_keras_model(keras_model)
    tflite_quant_model = converter.convert()
    open('conv.tflite', 'wb').write(tflite_quant_model)

gen_model()
```
keras model summary gives:
```
Model: "model"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
input_1 (InputLayer)         [(None, 28, 28, 1)]       0         
_________________________________________________________________
conv2d (Conv2D)              (None, 26, 26, 12)        120       
_________________________________________________________________
conv2d_1 (Conv2D)            (None, 24, 24, 12)        1308      
=================================================================

```

But,
inspect the model with [netron](https://github.com/lutzroeder/netron) or `bazel run //tensorflow/lite/tools:visualize conv.tflite conv.html` shows as below:

![image](https://user-images.githubusercontent.com/55463253/72816765-9276af00-3c60-11ea-8daf-fc42ced34568.png)

![image](https://user-images.githubusercontent.com/55463253/72816851-b2a66e00-3c60-11ea-9b7d-14ac076b5de4.png)


**Other info / logs**
N/A
resolves: #36071 